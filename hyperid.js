
module.exports = loadWebAssembly

loadWebAssembly.supported = typeof WebAssembly !== 'undefined'

function loadWebAssembly (opts) {
  if (!loadWebAssembly.supported) return null

  var imp = opts && opts.imports
  var wasm = toUint8Array('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')
  var ready = null

  var mod = {
    buffer: wasm,
    memory: null,
    exports: null,
    realloc: realloc,
    onload: onload
  }

  onload(function () {})

  return mod

  function realloc (size) {
    mod.exports.memory.grow(Math.max(0, Math.ceil(Math.abs(size - mod.memory.length) / 65536)))
    mod.memory = new Uint8Array(mod.exports.memory.buffer)
  }

  function onload (cb) {
    if (mod.exports) return cb()

    if (ready) {
      ready.then(cb.bind(null, null)).catch(cb)
      return
    }

    try {
      if (opts && opts.async) throw new Error('async')
      setup({instance: new WebAssembly.Instance(new WebAssembly.Module(wasm), imp)})
    } catch (err) {
      ready = WebAssembly.instantiate(wasm, imp).then(setup)
    }

    onload(cb)
  }

  function setup (w) {
    mod.exports = w.instance.exports
    mod.memory = mod.exports.memory && mod.exports.memory.buffer && new Uint8Array(mod.exports.memory.buffer)
  }
}

function toUint8Array (s) {
  if (typeof atob === 'function') return new Uint8Array(atob(s).split('').map(charCodeAt))
  return (require('buf' + 'fer').Buffer).from(s, 'base64')
}

function charCodeAt (c) {
  return c.charCodeAt(0)
}
